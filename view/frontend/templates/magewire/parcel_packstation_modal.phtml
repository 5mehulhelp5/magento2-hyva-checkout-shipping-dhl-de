<?php 

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Hyva\NetresearchShippingUi\Magewire\ParcelPackstationModal;
use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsOutline;

/** @var Escaper $escaper */
/** @var Template $block */
/** @var ParcelPackstationModal $magewire */
/** @var ViewModelRegistry $viewModels */

/** @var HeroiconsOutline $heroIcons */
$heroicons = $viewModels->require(HeroiconsOutline::class);
?>

<div x-data="mapdata()" 
     class="w-full h-full relative">    
    <button class="absolute right-0 top-0 p-6 cursor-pointer" 
            wire:click="closeModal" 
            type="button">
        <?= /* @noEscape */ $heroicons->xHtml('visibility.postoffice', 20, 20) ?>
    </button>
    <div class="grid grid-cols-2 gap-4">
        <div class="col-span-12 md:col-span-6 field-wrapper field-type-text">
            <label for="shipping-country" 
                   class="font-semibold">
                <span><?= $escaper->escapeHtml(__('Country')) ?></span>
            </label>
            <select id="shipping-country" 
                    class="form-select w-full" 
                    x-model="address.countryCode">
                <option value="DE" selected>
                    <?= $escaper->escapeHtml(__('Germany')) ?>
                </option>
            </select>
        </div>
        <div class="col-span-12 md:col-span-6 field-wrapper field-type-text">
            <label for="shipping-city" 
                   class="font-semibold">
                <span><?= $escaper->escapeHtml(__('City')) ?></span>
            </label>
            <input type="text" 
                   class="w-full form-input" 
                   id="shipping-city" 
                   x-model="address.city" 
                   placeholder="<?= $escaper->escapeHtmlAttr(__('City')) ?>" />
        </div>
        <div class="col-span-12 md:col-span-6 field-wrapper field-type-text">
            <label for="shipping-postalcode" 
                   class="font-semibold">
                <span><?= $escaper->escapeHtml(__('Postal Code')) ?></span>
            </label>
            <input type="text" 
                   class="w-full form-input" 
                   id="shipping-postalcode" 
                   x-model="address.postalCode" 
                   placeholder="<?= $escaper->escapeHtmlAttr(__('Postal Code')) ?>" />
        </div>
        <div class="col-span-12 md:col-span-6 field-wrapper field-type-text">
            <label for="shipping-street" 
                   class="font-semibold">
                <span><?= $escaper->escapeHtml(__('Street')) ?></span>
            </label>
            <input type="text" 
                   class="w-full form-input" 
                   id="shipping-street" 
                   x-model="address.street" 
                   placeholder="<?= $escaper->escapeHtmlAttr(__('Street')) ?>" />
        </div>
        <div class="col-span-12">
            <button @click.prevent="searchLocations" 
                    class="btn btn-primary text-sm mr-auto">
                <span><?= $escaper->escapeHtml(__('Search')) ?></span>
            </button>
        </div>
    </div>

    <div class="relative bg-white mt-6">
        <div id="layer-control" 
             class="absolute right-0 top-0 mr-2 mt-2 z-10 flex flex-col gap-y-2">
            <label for="postoffice-checkbox" 
                   class="flex items-center gap-x-2 px-2 bg-white rounded-md">
                <input type="checkbox" 
                       id="postoffice-checkbox" 
                       x-model="visibility.postoffice" 
                       @change="toggleLayer('postoffice')">
                <img src="<?= $block->escapeUrl($block->getViewFileUrl('Dhl_Paket::images/icon-postoffice.png')); ?>" 
                     alt="<?= $escaper->escapeHtmlAttr(__('Postoffice')) ?>">
            </label>
            <label for="locker-checkbox" 
                   class="flex items-center gap-x-2 px-2 bg-white rounded-md">
                <input type="checkbox" 
                       id="locker-checkbox" 
                       x-model="visibility.locker" 
                       @change="toggleLayer('locker')">
                <img src="<?= $block->escapeUrl($block->getViewFileUrl('Dhl_Paket::images/icon-packstation.png')); ?>" 
                     alt="<?= $escaper->escapeHtmlAttr(__('Locker')) ?>">
            </label>
            <label for="servicepoint-checkbox" 
                   class="flex items-center gap-x-2 px-2 bg-white rounded-md">
                <input type="checkbox" 
                       id="servicepoint-checkbox" 
                       x-model="visibility.servicepoint" 
                       @change="toggleLayer('servicepoint')">
                <img src="<?= $block->escapeUrl($block->getViewFileUrl('Dhl_Paket::images/icon-parcelshop.png')); ?>" 
                     alt="<?= $escaper->escapeHtmlAttr(__('Servicepoint')) ?>">
            </label>
        </div>
        
        <div class="relative w-full h-[50vh] md:w-[50vw] rounded-lg">
            <div x-data="initMap()" 
                 class="w-full h-full z-0" 
                 x-ref="map" 
                 id="map"></div>
            <template x-if="showParcelShops">
                <div class="absolute top-0 right-0 bottom-0 w-1/2 overflow-y-scroll shadow-2xl z-10">
                    <div class="bg-white p-4 flex flex-col gap-6">
                        <button type="button" 
                                @click="showParcelShops = false" 
                                class="absolute right-0 top-0 m-4">
                            <?= /* @noEscape */ $heroicons->xHtml('visibility.postoffice', 20, 20) ?>
                        </button>
                        <div>
                            <p class="font-bold mb-3" x-text="locations[currentDetailIndex].display_name"></p>
                            <p class="semi-bold"><?= $escaper->escapeHtml(__('Address') . ': ') ?></p>
                            <p x-text="locations[currentDetailIndex].address.company"></p>
                            <p x-text="locations[currentDetailIndex].address.street"></p>
                            <p x-text="locations[currentDetailIndex].address.postal_code + ' ' + locations[currentDetailIndex].address.city"></p>
                        </div>
                        <template x-if="locations[currentDetailIndex].opening_hours">
                            <div>
                                <p class="semi-bold"><?= $escaper->escapeHtml(__('Opening hours') . ': ') ?></p>
                                <template x-for="opening_hour in locations[currentDetailIndex].opening_hours" 
                                          :key="opening_hour.day_of_week">
                                    <div class="flex gap-x-3">
                                        <span class="w-10" x-text="opening_hour.day_of_week"></span>
                                        <template x-for="time_frame in opening_hour.time_frames" 
                                                  :key="time_frame.opens + time_frame.closes">
                                            <span x-text="time_frame.opens + ' - ' + time_frame.closes"></span>
                                        </template>
                                    </div>
                                </template>
                            </div>
                        </template>
                        <template x-if="locations[currentDetailIndex].services">
                            <div>
                                <p class="semi-bold"><?= $escaper->escapeHtml(__('Services') . ': ') ?></p>
                                <ul>
                                    <template x-for="service in locations[currentDetailIndex].services" 
                                              :key="service">
                                        <li>
                                            <span x-text="service" 
                                                  class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10"></span>
                                        </li>
                                    </template>
                                </ul>
                            </div>    
                        </template>
                    </div>
                    <div class="absolute top-0 w-full h-full bg-black/30 z-0" 
                         @click="showParcelShops = false"></div>
                </div>
            </template>
        </div>
    </div>
    <script>
        var mapboxApiToken = '<?= $magewire->getMapboxApiToken(); ?>';
        
        Alpine.data('mapdata', () => ({
            map: null,           
            layers: {
                postoffice: null,
                locker: null,
                servicepoint: null,
            },
            visibility: {
                postoffice: true,
                locker: true,
                servicepoint: true,
            },
            showParcelShops: false,
            currentDetailIndex: null,
            isLoading: false,
            loadfiles: false,
            address: {
                countryCode: '<?= $magewire->shippingAddress['countryCode'] ?? 'DE'; ?>',
                city: '<?= $magewire->shippingAddress['city'] ?? ''; ?>',
                postalCode: '<?= $magewire->shippingAddress['postalCode'] ?? ''; ?>',
                street: '<?= $magewire->shippingAddress['street'] ?? ''; ?>'
            },
            initialAddress: {},
            init() {
                this.fetchLocations();

                if (!this.loadfiles) {
                    this.loadJsCss().then(() => {
                        this.loadfiles = true;                            
                        this.updateMarkers();                             
                        this.initMap();
                    });
                }                  
            },
            loadJsCss() {
                return new Promise(resolve => {
                    const script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = '<?= $escaper->escapeUrl($block->getViewFileUrl("Netresearch_ShippingUi::lib/leaflet/leaflet.js")); ?>';
                    script.async = true;
                    script.onload = () => {
                        const link = document.createElement('link');
                        link.rel = 'stylesheet';
                        link.href = '<?= $escaper->escapeUrl($block->getViewFileUrl("Netresearch_ShippingUi::lib/leaflet/leaflet.css")); ?>';
                        link.onload = resolve;
                        document.head.appendChild(link);
                    };
                    document.head.appendChild(script);
                });
            },
            fetchLocations(hasRetried = false) {
                this.isLoading = true;
                this.initialAddress = JSON.parse(JSON.stringify(this.address)); 

                fetch(`${BASE_URL}rest/de/V1/nrshipping/delivery-locations/dhlpaket/search`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        searchAddress: this.address
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data && data.length > 0) {
                        this.locations = data;
                        this.updateMarkers();
                    } else {
                        if (!hasRetried) {
                            setTimeout(() => {
                                console.log('Retrying fetch after 1 second...');
                                this.fetchLocations(true);
                            }, 500);
                        }
                    }
                    this.isLoading = false;
                })
                .catch(error => {
                    this.isLoading = false;
                    this.map = false;
                    this.initialAddress = {};
                    dispatchMessages([
                        {
                            type: "error",
                            text: "Unfortunately, the request could not be executed."
                        }
                    ], 3000);
                    $wire.closeModal();
                });
            },
            searchLocations() {
                if (JSON.stringify(this.address) === JSON.stringify(this.initialAddress)) {
                    this.updateMarkers();
                    return;
                }

                this.fetchLocations();
                this.visibility.postoffice = true;
                this.visibility.locker = true;
                this.visibility.servicepoint = true;

                this.initialAddress = JSON.parse(JSON.stringify(this.address));
            },
            initMap() {
                if (this.loadfiles) {
                    if (!this.map) {
                        this.map = L.map('map');
                        this.layers.postoffice = L.layerGroup();
                        this.layers.locker = L.layerGroup();
                        this.layers.servicepoint = L.layerGroup();

                        const overlays = {
                            'postoffice': this.layers.postoffice,
                            'locker': this.layers.locker,
                            'servicepoint': this.layers.servicepoint
                        };

                        const attribution = `© <a href="https://www.mapbox.com/about/maps/">Mapbox</a> © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> <strong><a href="https://www.mapbox.com/map-feedback/" target="_blank">Improve this map</a></strong>`;
                        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                            maxZoom: 18,
                            id: 'mapbox/streets-v11',
                            tileSize: 512,
                            zoomOffset: -1,
                            accessToken: mapboxApiToken,
                            attribution: attribution
                        }).addTo(this.map);
                    }
                    if (this.locations && this.locations.length > 0) {
                        this.setLocations(this.locations);
                    }
                    this.initLayerVisibility();
                } 
            },
            setLocations(locations) {
                if (locations && locations.length > 0 && this.map) {
                    const firstLocation = locations[0];

                    if (firstLocation.latitude && firstLocation.longitude) {
                        this.map.setView([firstLocation.latitude, firstLocation.longitude], 15);
                    } else {
                        console.error('Invalid coordinates for the first location:', firstLocation);
                    }

                    locations.forEach((location, index) => {
                        const customIcon = L.icon({
                            iconUrl: location.icon,
                            iconSize: [55, 55],
                            iconAnchor: [25, 25],
                            popupAnchor: [1, -34],
                            className: location.shop_type,
                        });

                        let marker = L.marker([location.latitude, location.longitude], { icon: customIcon });

                        if (location.shop_type === 'postoffice') {
                            this.layers.postoffice.addLayer(marker);
                        } else if (location.shop_type === 'locker') {
                            this.layers.locker.addLayer(marker);
                        } else if (location.shop_type === 'servicepoint') {
                            this.layers.servicepoint.addLayer(marker);
                        }

                        marker.bindPopup(`
                            <div class="flex flex-col">
                                <span class="font-bold pb-2">${location.display_name}</span>
                                <span class="font-bold">${location.address.company}</span>
                                <span>${location.address.street}</span>
                                <span>${location.address.postal_code} ${location.address.city}</span>
                                <div class="flex flex-row gap-x-2 pt-2">
                                    <button type="button" class="auto btn btn-primary" 
                                            @click="setParcelShops({
                                                   company: '${location.address.company}',
                                                   displayName: '${location.display_name}',
                                                   countryCode: '${location.address.country_code}',
                                                   postalCode: '${location.address.postal_code}',
                                                   number: '${location.shop_number}',
                                                   city: '${location.address.city}',
                                                   street: '${location.address.street}',
                                                   type: '${location.shop_type}',
                                                   id: '${location.shop_id}'
                                                })">
                                        <?= $escaper->escapeHtml(__('Select')) ?>
                                    </button>
                                    <button type="button" 
                                            class="text-base" 
                                            @click="showParcelShopDetail(${index})">
                                        <?= /* @noEscape */ $heroicons->informationCircleHtml('information-circle', 20, 20) ?>
                                    </button>
                                </div>
                            </div>
                        `);
                    });
                }
            },
            updateMarkers() {
                if (this.map) {
                    this.map.eachLayer(layer => {
                        if (layer instanceof L.Marker) {
                            this.map.removeLayer(layer);
                        }
                    });
                }
                this.setLocations(this.locations);
            },                
            setParcelShops(dataToSend) {
                Magewire.emitTo('checkout.shipping.method.dhlpaket_bestway_packstation', 'parcel_packstation_saved', {
                    'deliveryLocation': {
                        type: dataToSend.type,
                        id: dataToSend.id,
                        number: dataToSend.number,
                        displayName: dataToSend.displayName,
                        company: dataToSend.company,
                        countryCode: dataToSend.countryCode,
                        postalCode: dataToSend.postalCode,
                        city: dataToSend.city,
                        street: dataToSend.street
                    }
                });
                dispatchMessages([
                    {
                        type: "success",
                        text: "The address has been successfully added"
                    }
                ], 3000);
            },
            initLayerVisibility() {
                if (this.visibility.postoffice) {
                    this.map.addLayer(this.layers.postoffice);
                } else {
                    this.map.removeLayer(this.layers.postoffice);
                }
                if (this.visibility.locker) {
                    this.map.addLayer(this.layers.locker);
                } else {
                    this.map.removeLayer(this.layers.locker);
                }
                if (this.visibility.servicepoint) {
                    this.map.addLayer(this.layers.servicepoint);
                } else {
                    this.map.removeLayer(this.layers.servicepoint);
                }
            },
            toggleLayer(layerType) {
                switch(layerType) {
                    case 'postoffice':
                        this.visibility.postoffice ? this.map.addLayer(this.layers.postoffice) : this.map.removeLayer(this.layers.postoffice);
                        break;
                    case 'locker':
                        this.visibility.locker ? this.map.addLayer(this.layers.locker) : this.map.removeLayer(this.layers.locker);
                        break;
                    case 'servicepoint':
                        this.visibility.servicepoint ? this.map.addLayer(this.layers.servicepoint) : this.map.removeLayer(this.layers.servicepoint);
                        break;
                }
                this.centerToNextLocation();
            },
            centerToNextLocation() {
                const visibleLocation = this.locations.find(location => {
                    return (this.visibility.postoffice && location.shop_type === 'postoffice') ||
                           (this.visibility.locker && location.shop_type === 'locker') ||
                           (this.visibility.servicepoint && location.shop_type === 'servicepoint');
                });
                if (visibleLocation) {
                    this.map.setView([visibleLocation.latitude, visibleLocation.longitude]);
                }
            },
            showParcelShopDetail(index) {
                if (this.currentDetailIndex === index) {
                    this.showParcelShops = !this.showParcelShops;
                } else {
                    this.currentDetailIndex = index;
                    this.showParcelShops = true;
                    this.map.setView([this.locations[this.currentDetailIndex].latitude, this.locations[this.currentDetailIndex].longitude]);
                }
            },
            errorHandler(message) {
                console.error(message);
            }
        }));
    </script>
</div>